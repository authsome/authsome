import { useEffect, useState } from 'react';
import { Wallet } from 'fuels';

// Import the contract factory from the folder generated by the fuelchain
// command
import { ContractsAbi__factory } from './contracts';
import { useForm } from 'react-hook-form';
import { spawn } from 'child_process';

// The private key of the `owner` in chainConfig.json.
// This enables us to have an account with an initial balance.
const WALLET_SECRET =
    '0xa449b1ffee0e2205fa924c6740cc48b3b473aa28587df6dab12abc245d1f5298';

// The ID of the contract deployed to our local node.
// The contract ID is displayed when the `forc deploy` command is run.
// E.g. Contract id: 0xa326e3472fd4abc417ba43e369f59ea44f8325d42ba6cf71ec4b58123fd8668a
// const CONTRACT_ID = "0xa326e3472fd4abc417ba43e369f59ea44f8325d42ba6cf71ec4b58123fd8668a"
const CONTRACT_ID = '0xd97ac31a1a473e6dd6f7dfdaf773a2a4df452ec3445afd291298b48dcea57cd3';

// Create a "Wallet" using the private key above.
const wallet = new Wallet(WALLET_SECRET);
console.log('wallet', wallet);

// Connect a "Contract" instance using the ID of the deployed contract and the
// wallet above.
const contract = ContractsAbi__factory.connect(CONTRACT_ID, wallet);
console.log('contract', contract);

function App() {
    const [counter, setCounter] = useState(0);
    const [loginError, setLoginError] = useState('');
    const {
        register,
        handleSubmit,
        watch,
        // formState: { errors },
    } = useForm();

    useEffect(() => {
        async function main() {
            // Executes the `counter()` function to query the current contract state.
            // the `.get()` method is read-only. Therefore, doesn't spend coins.
            const { value } = await contract.functions.counter().get();
            setCounter(Number(value));
        }
        main();
    }, []);

    async function increment() {
        // Creates a transactions to call the `increment()` function, passing in
        // the amount we want to increment. Because we're creating a TX that updates
        // the contract state, this requires the wallet to have enough coins to
        // cover the costs and to sign the transaction.
        const { value } = await contract.functions.increment(1).call();
        setCounter(Number(value));
    }

    // Reset register errors
    const watchEmail = watch('email');
    useEffect(() => {
        if (loginError) {
            setLoginError('');
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [watchEmail]);

    const onSubmit = (data: any) => {
        console.log('data', data);
        // submit logic here
        if (!data.email.includes('@')) {
            setLoginError('Please enter a valid email.');
            return;
        }
        if (data.email === '') {
            setLoginError('Please enter a valid email.');
            return;
        }
    };

    return (
        <div className="h-screen w-100 bg-gray-800">
            <div className="bg-gray-300 text-gray-600 w-6/12 h-3/6 px-20 py-12 relative top-2/4 left-2/4 translate-y-[-50%] translate-x-[-50%] rounded-lg text-center">
                <h1 className="text-4xl font-bold mb-4">Logo</h1>
                <form className="text-left" onSubmit={handleSubmit(onSubmit)}>
                    <label
                        className="mb-1 block text-lg text-gray-600 font-semibold"
                        htmlFor="email"
                    >
                        Email
                    </label>
                    <input
                        className="block w-full px-4 py-2 rounded-sm bg-gray-400 text-white placeholder-gray-200 border-2 border-[#6b728049] focus:outline focus:outline-1 focus:outline-blue-500"
                        type="text"
                        placeholder="Email"
                        {...register('email', { required: true })}
                    />
                    {loginError && (
                        <span className="block mt-2 text-red-700">
                            Error: {loginError}
                        </span>
                    )}
                    <button
                        className="px-4 py-2 mt-2 bg-blue-700 text-white text-sm font-semibold rounded-md uppercase hover:opacity-70 transition-opacity transition-duration-300"
                        type="submit"
                    >
                        Login
                    </button>
                </form>
                <div className="p-2 mt-20 border-2 border-gray-200">
                    <span>(test contract, to delete)</span>
                    <h2 className="text-xl font-bold mb-2">Counter: {counter}</h2>
                    <button
                        className="px-4 py-2 mb-2 bg-blue-700 text-white rounded-md"
                        onClick={increment}
                    >
                        Increment
                    </button>
                </div>
            </div>
        </div>
    );
}

export default App;
